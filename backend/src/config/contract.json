{
  "address": "0xA07856b6d5Bd4761d11c21C25BBd07C04f4Aa416",
  "abi": [
    "constructor(address _pythContract, address _botAnalyzer)",
    "event BadBotFlagged(address indexed user, uint256 score, string riskLevel, string reason, int64 priceUsed, uint256 reactionTimeMs)",
    "event BotUnflagged(address indexed user, uint8 previousCategory)",
    "event GoodBotFlagged(address indexed user, uint256 score, string botType, uint256 liquidityProvided, string reason, int64 priceUsed, uint256 reactionTimeMs)",
    "event TradeExecuted(address indexed user, uint256 timestamp, uint256 amount, uint256 blockNumber, int64 btcPrice)",
    "function admin() view returns (address)",
    "function badBots(uint256) view returns (address)",
    "function botAnalyzer() view returns (address)",
    "function botEvidenceProof(address) view returns (address user, uint256 tradeTimestamp, uint256 pricePublishTime, int64 priceAtTrade, uint256 reactionTimeMs, uint256 botScore, uint8 category, string botType, uint256 liquidityProvided)",
    "function botRegistry(address) view returns (bool isFlagged, uint256 score, uint8 category, string botType, uint256 liquidityProvided, uint256 flaggedAt)",
    "function executeTrade(uint256 amount)",
    "function executeTradeWithPriceProof(uint256 amount, bytes[] priceUpdateData, bytes32 priceId) payable",
    "function flagBadBots(address[] users, uint256[] scores, string[] riskLevels)",
    "function flagBadBotsWithPythProof(address[] users, uint256[] scores, string[] riskLevels, string[] reasons, bytes[] priceUpdateData, bytes32 priceId) payable",
    "function flagGoodBots(address[] users, uint256[] scores, string[] botTypes, uint256[] liquidityAmounts)",
    "function flagGoodBotsWithPythProof(address[] users, uint256[] scores, string[] botTypes, uint256[] liquidityAmounts, string[] reasons, bytes[] priceUpdateData, bytes32 priceId) payable",
    "function getBadBots() view returns (address[])",
    "function getBadBotsCount() view returns (uint256)",
    "function getBotEvidence(address user) view returns (tuple(address user, uint256 tradeTimestamp, uint256 pricePublishTime, int64 priceAtTrade, uint256 reactionTimeMs, uint256 botScore, uint8 category, string botType, uint256 liquidityProvided))",
    "function getBotInfo(address user) view returns (tuple(bool isFlagged, uint256 score, uint8 category, string botType, uint256 liquidityProvided, uint256 flaggedAt))",
    "function getGoodBots() view returns (address[])",
    "function getGoodBotsCount() view returns (uint256)",
    "function getUserTrades(address user) view returns (tuple(address user, uint256 timestamp, uint256 amount, uint256 blockNumber, int64 btcPriceAtTrade, uint64 pricePublishTime)[])",
    "function goodBots(uint256) view returns (address)",
    "function isBadBotAddress(address user) view returns (bool)",
    "function isBot(address user) view returns (bool, uint256)",
    "function isGoodBotAddress(address user) view returns (bool)",
    "function pyth() view returns (address)",
    "function setBotAnalyzer(address _newAnalyzer)",
    "function unflagBot(address user)",
    "function userTrades(address, uint256) view returns (address user, uint256 timestamp, uint256 amount, uint256 blockNumber, int64 btcPriceAtTrade, uint64 pricePublishTime)"
  ],
  "network": "sepolia",
  "deployer": "0x3319148cB4324b0fbBb358c93D52e0b7f3fe4bc9",
  "pythContract": "0xDd24F84d36BF92C65F92307595335bdFab5Bbd21"
}